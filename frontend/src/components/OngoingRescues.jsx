import { useState } from "react";
import { FaAmbulance, FaMapMarkerAlt } from "react-icons/fa";
import { AiFillPrinter } from "react-icons/ai";
import jsPDF from "jspdf";
import "jspdf-autotable";

const OngoingRescues = ({ requests, user }) => {
  const ongoingRescues = requests
    .filter((request) => request.status === "assigned")
    .map((request, index) => ({
      id: index + 1,
      location: request.location.address,
      rescuer: `${request.rescuerId}`,
      status: request.status,
      acceptedTimestamp: new Intl.DateTimeFormat("en-US", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
      }).format(new Date(request.acceptedTimestamp)),
      estimatedArrivalTime: "TBD",
      estimatedDepartureTime: "TBD",
    }));

  const [showMap, setShowMap] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const rowsPerPage = 5;

  const totalRows = ongoingRescues.length;
  const totalPages = Math.ceil(totalRows / rowsPerPage);
  const startIndex = (currentPage - 1) * rowsPerPage;
  const endIndex = startIndex + rowsPerPage;
  const paginatedRescues = ongoingRescues.slice(startIndex, endIndex);

  const handlePageChange = (newPage) => {
    if (newPage > 0 && newPage <= totalPages) {
      setCurrentPage(newPage);
    }
  };

  const pageNumbers = Array.from({ length: totalPages }, (_, i) => i + 1);
  const visiblePages = pageNumbers.slice(
    Math.max(0, currentPage - 2),
    Math.min(totalPages, currentPage + 3)
  );

  const handleShowMap = (location) => {
    setShowMap(location);
  };

  const handlePrint = () => {
    const doc = new jsPDF("landscape");

    doc.setFontSize(18);
    doc.text(
      "Ongoing Rescues Report",
      doc.internal.pageSize.getWidth() / 2,
      10,
      {
        align: "center",
      }
    );

    const tableColumn = [
      { title: "#", dataKey: "id" },
      { title: "Rescuer ID", dataKey: "rescuer" },
      { title: "Location", dataKey: "location" },
      { title: "Accepted Timestamp", dataKey: "acceptedTimestamp" },
      { title: "Estimated Arrival", dataKey: "estimatedArrivalTime" },
      { title: "Estimated Departure", dataKey: "estimatedDepartureTime" },
      { title: "Status", dataKey: "status" },
    ];

    const tableRows = ongoingRescues.map((rescue) => ({
      id: rescue.id,
      rescuer: rescue.rescuer,
      location: rescue.location,
      acceptedTimestamp: rescue.acceptedTimestamp,
      estimatedArrivalTime: rescue.estimatedArrivalTime,
      estimatedDepartureTime: rescue.estimatedDepartureTime,
      status: rescue.status,
    }));

    doc.autoTable({
      head: [tableColumn.map((col) => col.title)],
      body: tableRows.map((row) => Object.values(row)),
      startY: 40,
      theme: "grid",
      styles: {
        fontSize: 10,
        cellPadding: 2,
        halign: "center",
        valign: "middle",
        lineColor: "#557C55",
        lineWidth: 0.5,
      },
      headStyles: {
        fillColor: "#557C55",
        textColor: "#FFFFFF",
        fontSize: 10,
      },
    });

    // Add footer
    const pageHeight = doc.internal.pageSize.getHeight();
    const pageWidth = doc.internal.pageSize.getWidth();
    const footerY = pageHeight - 10;

    doc.setFontSize(10);
    doc.text(
      `Generated by: ${user?.first_name} ${user?.last_name}`,
      10,
      footerY
    );
    doc.text(
      `Generated date: ${new Date().toLocaleString()}`,
      pageWidth - 70,
      footerY
    );

    doc.save("ongoing_rescue_operations.pdf");
  };

  return (
    <div className="flex flex-col p-4 lg:p-6 h-full ">
      {/* Header */}
      <div className="flex items-center mb-2 sm:mb-4 border-b border-gray-200 pb-3">
        <FaAmbulance className="text-3xl sm:text-2xl lg:text-3xl text-primary-dark mr-2 fill-current" />
        <h4 className="text-xl sm:text-md lg:text-3xl text-primary-dark font-bold">
          Ongoing Rescue Operations
        </h4>
      </div>

      <p className="text-lg font-semibold text-[#557C55] self-start">
        Monitoring the status and progress of active rescue efforts.
      </p>

      {/* Map Toggle */}
      {showMap && (
        <div className="mb-6">
          <h5 className="text-xl font-semibold mb-2 text-primary">
            Location Map: {showMap}
          </h5>
          <div
            className="map-placeholder bg-[#eaeaea] rounded-lg"
            style={{ height: "200px" }}
          >
            <p className="text-center pt-4 text-md">
              Map displaying location: {showMap}
            </p>
          </div>
          <button
            className="bg-secondary text-white mt-3 px-4 py-1 rounded-full hover:bg-primary-medium transition flex items-center justify-center"
            onClick={() => setShowMap(false)}
          >
            Hide Map
          </button>
        </div>
      )}

      {/* Rescue Data Table */}
      <div className="flex flex-col flex-1">
        {/* Print Button */}
        <div className="flex justify-end mb-2">
          <button
            onClick={handlePrint}
            className="bg-primary-medium text-white px-4 py-2 rounded-md hover:bg-[#6EA46E] transition flex items-center text-sm"
          >
            <AiFillPrinter className="text-base mr-1" />
            Generate PDF
          </button>
        </div>

        {/* Responsive Card Container */}
        <div className="overflow-x-auto lg:hidden">
          {paginatedRescues.map((rescue) => (
            <div
              key={rescue.id}
              className="bg-gray-200 rounded-xl p-3 mb-3 shadow-sm"
            >
              <h5 className="text-md truncate">
                <span className="text-primary-dark font-semibold">
                  Rescue ID:{" "}
                </span>
                <span className="text-gray-500">{rescue.rescuer}</span>
              </h5>
              <h5 className="truncate">
                <span className="text-primary-dark font-semibold">
                  Location:{" "}
                </span>
                <span className="text-gray-500">{rescue.location}</span>
              </h5>
              <h5 className="truncate">
                <span className="text-primary-dark font-semibold">
                  Accepted:{" "}
                </span>
                <span className="text-gray-500">
                  {rescue.acceptedTimestamp}
                </span>
              </h5>
              <h5 className="truncate">
                <span className="text-primary-dark font-semibold">ETA: </span>
                <span className="text-gray-500">
                  {rescue.estimatedArrivalTime}
                </span>
              </h5>
              <h5 className="truncate">
                <span className="text-primary-dark font-semibold">
                  Departure:{" "}
                </span>
                <span className="text-gray-500">
                  {rescue.estimatedDepartureTime}
                </span>
              </h5>
              <h5 className="truncate">
                <span className="text-primary-dark font-semibold">
                  Status:{" "}
                </span>
                <span
                  className={
                    rescue.status === "pending"
                      ? "text-warning"
                      : rescue.status === "assigned"
                      ? "text-info"
                      : rescue.status === "in-progress"
                      ? "text-orange-500"
                      : "text-primary-medium"
                  }
                >
                  {rescue.status}
                </span>
              </h5>
              <button
                onClick={() => handleShowMap(rescue.location)}
                className="bg-secondary mt-3 text-white px-4 py-1 rounded-full hover:bg-primary-medium transition flex items-center justify-center"
              >
                <FaMapMarkerAlt className="text-xl" />
                Show Map
              </button>
            </div>
          ))}
        </div>

        {/* Table for larger screens */}
        <div className="hidden lg:block overflow-x-auto">
          <table className="min-w-full bg-gray-200 border border-gray-200 rounded-md overflow-hidden">
            <thead className="bg-[#557C55] text-white">
              <tr>
                <th className="px-4 py-2 text-center text-xs font-medium">#</th>
                <th className="px-4 py-2 text-center text-xs font-medium">
                  Rescuer ID
                </th>
                <th className="px-4 py-2 text-center text-xs font-medium">
                  Location
                </th>
                <th className="px-4 py-2 text-center text-xs font-medium">
                  Accepted Timestamp
                </th>
                <th className="px-4 py-2 text-center text-xs font-medium">
                  Estimated Arrival
                </th>
                <th className="px-4 py-2 text-center text-xs font-medium">
                  Estimated Departure
                </th>
                <th className="px-4 py-2 text-center text-xs font-medium">
                  Status
                </th>
                <th className="px-4 py-2 text-center text-xs font-medium">
                  Map
                </th>
              </tr>
            </thead>
            <tbody>
              {paginatedRescues.map((rescue, index) => (
                <tr
                  key={rescue.id}
                  className={`border-b ${
                    index % 2 === 0 ? "bg-gray-50" : "bg-white"
                  }`}
                >
                  <td className="px-4 py-2 text-xs text-center font-semibold text-warning">
                    {rescue.id}
                  </td>
                  <td className="px-4 py-2 text-xs text-center">
                    {rescue.rescuer}
                  </td>
                  <td className="px-4 py-2 text-xs text-center">
                    {rescue.location}
                  </td>
                  <td className="px-4 py-2 text-xs text-center">
                    {rescue.acceptedTimestamp}
                  </td>
                  <td className="px-4 py-2 text-xs text-center">
                    {rescue.estimatedArrivalTime}
                  </td>
                  <td className="px-4 py-2 text-xs text-center">
                    {rescue.estimatedDepartureTime}
                  </td>
                  <td className="px-4 py-2 text-xs text-center ">
                    <span
                      className={
                        {
                          pending:
                            "bg-white py-1 px-3rounded-full shadow-sm text-warning",
                          assigned:
                            "bg-white py-1 px-3 rounded-full shadow-sm text-info",
                          "in-progress":
                            "bg-white py-1 px-3 rounded-full shadow-sm text-secondary",
                          completed:
                            "bg-white py-1 px-3 rounded-full shadow-sm text-primary-medium",
                        }[rescue.status]
                      }
                    >
                      {rescue.status}
                    </span>
                  </td>
                  <td className="px-4 py-2 text-xs text-center">
                    <button
                      onClick={() => handleShowMap(rescue.location)}
                      className="bg-secondary text-white p-2 rounded-full hover:bg-primary-medium transition flex items-center justify-center"
                    >
                      <FaMapMarkerAlt className="text-xl" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Pagination */}
      <div className="flex justify-center mt-4">
        <button
          onClick={() => handlePageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className="px-3 py-1 bg-[#557C55] text-white rounded-l-md"
        >
          Prev
        </button>
        {visiblePages.map((page) => (
          <button
            key={page}
            onClick={() => handlePageChange(page)}
            className={`px-3 py-1 ${
              currentPage === page ? "bg-[#6EA46E]" : "bg-[#557C55]"
            } text-white`}
          >
            {page}
          </button>
        ))}
        <button
          onClick={() => handlePageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className="px-3 py-1 bg-[#557C55] text-white rounded-r-md"
        >
          Next
        </button>
      </div>
    </div>
  );
};

export default OngoingRescues;
