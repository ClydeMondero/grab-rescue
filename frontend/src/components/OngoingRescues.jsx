import { useState } from "react";
import { FaAmbulance, FaMapMarkerAlt } from "react-icons/fa";
import { AiFillPrinter } from "react-icons/ai";
import jsPDF from "jspdf";
import "jspdf-autotable";

const OngoingRescues = ({ requests, user }) => {
  const [filterStatus, setFilterStatus] = useState("all");

  const ongoingRescues = requests
    .filter((request) => {
      if (filterStatus === "all")
        return request.status === "assigned" || request.status === "rescued";
      return request.status === filterStatus;
    })
    .map((request, index) => ({
      id: index + 1,
      location: request.location.address,
      rescuer: `${request.rescuerId}`,
      status: request.status,
      acceptedTimestamp: new Intl.DateTimeFormat("en-US", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
      }).format(new Date(request.acceptedTimestamp)),
    }));

  const [showMap, setShowMap] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const rowsPerPage = 5;

  const totalRows = ongoingRescues.length;
  const totalPages = Math.ceil(totalRows / rowsPerPage);
  const startIndex = (currentPage - 1) * rowsPerPage;
  const endIndex = startIndex + rowsPerPage;
  const paginatedRescues = ongoingRescues.slice(startIndex, endIndex);

  const handlePageChange = (newPage) => {
    if (newPage > 0 && newPage <= totalPages) {
      setCurrentPage(newPage);
    }
  };

  const handleShowMap = (location) => {
    setShowMap(location);
  };

  const handlePrint = () => {
    const doc = new jsPDF("landscape");

    doc.setFontSize(18);
    doc.text(
      "Ongoing Rescues Report",
      doc.internal.pageSize.getWidth() / 2,
      10,
      { align: "center" }
    );

    const tableColumn = [
      { title: "#", dataKey: "id" },
      { title: "Rescuer ID", dataKey: "rescuer" },
      { title: "Location", dataKey: "location" },
      { title: "Accepted Timestamp", dataKey: "acceptedTimestamp" },
      { title: "Status", dataKey: "status" },
    ];

    const tableRows = ongoingRescues.map((rescue) => ({
      id: rescue.id,
      rescuer: rescue.rescuer,
      location: rescue.location,
      acceptedTimestamp: rescue.acceptedTimestamp,
      status: rescue.status,
    }));

    doc.autoTable({
      head: [tableColumn.map((col) => col.title)],
      body: tableRows.map((row) => Object.values(row)),
      startY: 40,
      theme: "grid",
      styles: {
        fontSize: 10,
        cellPadding: 2,
        halign: "center",
        valign: "middle",
        lineColor: "#557C55",
        lineWidth: 0.5,
      },
      headStyles: {
        fillColor: "#557C55",
        textColor: "#FFFFFF",
        fontSize: 10,
      },
    });

    // Add footer
    const pageHeight = doc.internal.pageSize.getHeight();
    const pageWidth = doc.internal.pageSize.getWidth();
    const footerY = pageHeight - 10;

    doc.setFontSize(10);
    doc.text(
      `Generated by: ${user?.first_name} ${user?.last_name}`,
      10,
      footerY
    );
    doc.text(
      `Generated date: ${new Date().toLocaleString()}`,
      pageWidth - 70,
      footerY
    );

    doc.save("ongoing_rescue_operations.pdf");
  };

  return (
    <div className="flex flex-col p-4 lg:p-6 h-full">
      {/* Header */}
      <div className="flex items-center mb-2 sm:mb-4 border-b border-gray-200 pb-3">
        <FaAmbulance className="text-3xl sm:text-2xl lg:text-3xl text-primary-dark mr-2 fill-current" />
        <h4 className="text-xl sm:text-md lg:text-3xl text-primary-dark font-bold">
          Ongoing Rescue Operations
        </h4>
      </div>

      <p className="text-lg font-semibold text-[#557C55] self-start">
        Monitoring the status and progress of active rescue efforts.
      </p>

      {/* Rescue Data Table */}
      <div className="flex flex-col flex-1">
        {/* Print Button */}
        <div className="flex justify-end mb-2">
          <button
            onClick={handlePrint}
            className="bg-primary-medium text-white px-4 py-2 rounded-md hover:bg-[#6EA46E] transition flex items-center text-sm"
          >
            <AiFillPrinter className="text-base mr-1" />
            Generate PDF
          </button>
        </div>

        {/* Table for larger screens */}
        <div className="hidden lg:block overflow-x-auto">
          {/* Filter Status */}
          <div className="mb-4">
            <label
              htmlFor="status-filter"
              className="mr-2 font-semibold text-gray-700"
            >
              Filter by status:
            </label>
            <select
              id="status-filter"
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              className="border border-gray-300 rounded-md px-3 py-1"
            >
              <option value="all">All</option>
              <option value="assigned">Assigned</option>
              <option value="rescued">Rescued</option>
            </select>
          </div>
          <table className="min-w-full bg-gray-200 border border-gray-200 rounded-md overflow-hidden">
            <thead className="bg-[#557C55] text-white">
              <tr>
                <th className="px-4 py-2 text-center text-xs font-medium">#</th>
                <th className="px-4 py-2 text-center text-xs font-medium">
                  Rescuer ID
                </th>
                <th className="px-4 py-2 text-center text-xs font-medium">
                  Location
                </th>
                <th className="px-4 py-2 text-center text-xs font-medium">
                  Accepted Timestamp
                </th>
                <th className="px-4 py-2 text-center text-xs font-medium">
                  Status
                </th>

                {/* Conditionally Render Map Column Header */}
                {filterStatus !== "rescued" && (
                  <th className="px-4 py-2 text-center text-xs font-medium">
                    Map
                  </th>
                )}
              </tr>
            </thead>
            <tbody>
              {paginatedRescues.map((rescue, index) => (
                <tr
                  key={rescue.id}
                  className={`border-b ${
                    index % 2 === 0 ? "bg-gray-50" : "bg-white"
                  }`}
                >
                  <td className="px-4 py-2 text-xs text-center font-semibold text-warning">
                    {rescue.id}
                  </td>
                  <td className="px-4 py-2 text-xs text-center">
                    {rescue.rescuer}
                  </td>
                  <td className="px-4 py-2 text-xs text-center">
                    {rescue.location}
                  </td>
                  <td className="px-4 py-2 text-xs text-center">
                    {rescue.acceptedTimestamp}
                  </td>
                  <td
                    className={`px-4 py-2 text-xs text-center ${
                      rescue.status === "assigned"
                        ? "text-info"
                        : "text-primary"
                    }`}
                  >
                    {rescue.status.charAt(0).toUpperCase() +
                      rescue.status.slice(1)}
                  </td>

                  {/* Conditionally Render Map Button */}
                  {rescue.status === "assigned" && (
                    <td className="px-4 py-2 text-xs text-center">
                      <button
                        onClick={() => handleShowMap(rescue.location)}
                        className="bg-secondary text-white px-4 py-1 rounded-full hover:bg-primary-medium transition flex items-center justify-center"
                      >
                        <FaMapMarkerAlt className="text-xl" />
                      </button>
                    </td>
                  )}
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination Controls */}
        <div className="flex justify-center mt-4">
          <button
            onClick={() => handlePageChange(currentPage - 1)}
            className={`px-3 py-1 border rounded-md ${
              currentPage === 1
                ? "bg-gray-300 text-gray-500"
                : "bg-white text-primary-dark"
            }`}
            disabled={currentPage === 1}
          >
            Previous
          </button>
          <span className="mx-3 text-sm text-gray-600">
            Page {currentPage} of {totalPages}
          </span>
          <button
            onClick={() => handlePageChange(currentPage + 1)}
            className={`px-3 py-1 border rounded-md ${
              currentPage === totalPages
                ? "bg-gray-300 text-gray-500"
                : "bg-white text-primary-dark"
            }`}
            disabled={currentPage === totalPages}
          >
            Next
          </button>
        </div>
      </div>
    </div>
  );
};

export default OngoingRescues;
